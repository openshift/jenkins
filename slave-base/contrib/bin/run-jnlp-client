#!/bin/bash
#
# This script will launch the JNLP remoting client that Jenkins master server
# will use for the auto-discovery of this slave.
#

# The directory that Jenkins will execute the builds and store cache files.
# The directory has to be writeable for the user that the container is running
# under.
export JENKINS_HOME=/home/jenkins

# Make sure the Java clients have valid $HOME directory set
export HOME=${JENKINS_HOME}

source /usr/local/bin/generate_container_user

#get the fully qualified paths to both 32 and 64 bit java
JVMPath32bit=`alternatives --display java | grep family | grep i386 | awk '{print $1}'`
JVMPath64bit=`alternatives --display java | grep family | grep x86_64 | awk '{print $1}'`

# set the java version used based on OPENSHIFT_JENKINS_JVM_ARCH
if [ -z $OPENSHIFT_JENKINS_JVM_ARCH  ]; then
    echo "Using 64 bit Java since OPENSHIFT_JENKINS_JVM_ARCH is not set"
    alternatives --set java $JVMPath64bit
elif [ "${OPENSHIFT_JENKINS_JVM_ARCH}" == "x86_64"  ]; then
    echo "64 bit Java explicitly set in OPENSHIFT_JENKINS_JVM_ARCH"
    alternatives --set java $JVMPath64bit
else
    echo "OPENSHIFT_JENKINS_JVM_ARCH is set to ${OPENSHIFT_JENKINS_JVM_ARCH} so using 32 bit Java"
    alternatives --set java $JVMPath32bit
fi

# Configure the slave image
source /usr/local/bin/configure-slave

set -e

# if `docker run` has 2 or more arguments the user is passing jenkins launcher arguments
if [[ $# -gt 1 ]]; then
  JAR="${JENKINS_HOME}/remoting.jar"
  PARAMS=""

  # if -url is not provided try env vars
  if [[ "$@" != *"-url "* ]]; then
    if [ ! -z "$JENKINS_URL" ]; then
      PARAMS="$PARAMS -url $JENKINS_URL"
    elif [ ! -z "$JENKINS_SERVICE_HOST" ] && [ ! -z "$JENKINS_SERVICE_PORT" ]; then
      PARAMS="$PARAMS -url http://$JENKINS_SERVICE_HOST:$JENKINS_SERVICE_PORT"
    fi
  fi

  echo "Downloading ${JENKINS_URL}/jnlpJars/remoting.jar ..."
  curl -sS ${JENKINS_URL}/jnlpJars/remoting.jar -o ${JAR}

  # if -tunnel is not provided try env vars
  if [[ "$@" != *"-tunnel "* ]]; then
    if [ ! -z "$JENKINS_TUNNEL" ]; then
      PARAMS="$PARAMS -tunnel $JENKINS_TUNNEL"
    elif [ ! -z "$JENKINS_SLAVE_SERVICE_HOST" ] && [ ! -z "$JENKINS_SLAVE_SERVICE_PORT" ]; then
      PARAMS="$PARAMS -tunnel $JENKINS_SLAVE_SERVICE_HOST:$JENKINS_SLAVE_SERVICE_PORT"
    fi
  fi

  CONTAINER_MEMORY_IN_BYTES=`cat /sys/fs/cgroup/memory/memory.limit_in_bytes`
  DEFAULT_MEMORY_CEILING=$((2**40-1))
  if [ "${CONTAINER_MEMORY_IN_BYTES}" -lt "${DEFAULT_MEMORY_CEILING}" ]; then

      if [ -z $CONTAINER_HEAP_PERCENT ]; then
              CONTAINER_HEAP_PERCENT=0.50
      fi
      
      CONTAINER_MEMORY_IN_MB=$((${CONTAINER_MEMORY_IN_BYTES}/1024**2))
      CONTAINER_HEAP_MAX=$(echo "${CONTAINER_MEMORY_IN_MB} ${CONTAINER_HEAP_PERCENT}" | awk '{ printf "%d", $1 * $2 }')      
      JAVA_MAX_HEAP_PARAM="-Xmx${CONTAINER_HEAP_MAX}m"
  fi 

  if [ -z $JAVA_GC_OPTS ]; then
    JAVA_GC_OPTS="-XX:+UseParallelGC -XX:MaxPermSize=100m -XX:MinHeapFreeRatio=20 -XX:MaxHeapFreeRatio=40 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90"
  fi

  echo Running java $JAVA_GC_OPTS $JAVA_MAX_HEAP_PARAM $JAVA_OPTS -cp $JAR hudson.remoting.jnlp.Main -headless $PARAMS "$@"
  cd ${JENKINS_DIR} && exec java $JAVA_OPTS \
    -cp $JAR hudson.remoting.jnlp.Main -headless $PARAMS "$@"
fi

exec "$@"
