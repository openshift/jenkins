#!/bin/bash
#
# Test the Jenkins image.
#
# IMAGE_NAME specifies the name of the candidate image used for testing.
# The image has to be available before this script is executed.
#

set -eo nounset
shopt -s nullglob

IMAGE_NAME=${IMAGE_NAME-openshift/jenkins-1-centos7-candidate}

FAILURE=true

CIDFILE_DIR=$(mktemp --suffix=jenkins_test_cidfiles -d)
VOLUME=`mktemp -d`
chmod a+rwx $VOLUME

function cleanup() {
  for cidfile in $CIDFILE_DIR/* ; do
    CONTAINER=$(cat $cidfile)

    echo "Stopping and removing container $CONTAINER..."
    docker stop $CONTAINER
    exit_status=$(docker inspect -f '{{.State.ExitCode}}' $CONTAINER)
    [[ "${FAILURE}" == "true" ]] && echo "Dumping logs for $CONTAINER"
    [[ "${FAILURE}" == "true" ]] && docker logs $CONTAINER
    docker rm $CONTAINER
    rm $cidfile
    echo "Done."
  done
  rmdir $CIDFILE_DIR
  # This fails because the volume contains files owned by the container uid, so we can't clean it up.
  #rm -rf $VOLUME
}
trap cleanup EXIT SIGINT

function get_cid() {
  local id="$1" ; shift || return 1
  echo $(cat "$CIDFILE_DIR/$id")
}

function get_container_ip() {
  local id="$1" ; shift
  docker inspect --format='{{.NetworkSettings.IPAddress}}' $(get_cid "$id")
}

test_connection() {
  set +e
  echo "Testing HTTP connection..."
  local max_attempts=20
  local sleep_time=6
  local attempt=1
  local result=1
  while [ $attempt -le $max_attempts ]; do
    echo "Sending GET request to http://${CONTAINER_IP}:8080/"
    response_code=$(curl -s -w %{http_code} -o /dev/null "http://${CONTAINER_IP}:8080/login?from=%2F")
    status=$?
    if [ $status -eq 0 ]; then
      if [ $response_code -eq 200 ]; then
        result=0
        break
      fi
    fi
    attempt=$(( $attempt + 1 ))
    sleep $sleep_time
  done
  set -e
  return $result
}

function create_container() {
  local name=$1 ; shift
  local volume=$1; shift
  local cargs=${CONTAINER_ARGS:-}
  cidfile="$CIDFILE_DIR/$name"
  # create container with a cidfile in a directory for cleanup
  docker run $cargs --name=$name --cidfile $cidfile -d -v $volume:/var/lib/jenkins:Z -p 8080:8080 "$@" $IMAGE_NAME
  echo "Created container $(cat $cidfile)"
}

function delete_container() {
  CONTAINER=$(cat $cidfile)
  docker stop $CONTAINER
  docker rm $CONTAINER
  rm $cidfile  
}

# $1 - username
# $2 - password
# $3 - job name
function test_create_job() {
  curl --fail --user $1:$2 -X POST -H "Content-Type: application/xml" -H "Expect: " --data-binary '@test/testjob.xml' http://${CONTAINER_IP}:8080/createItem\?name=$3
}

# $1 - username
# $2 - password
# $3 - job name
function test_get_job() {
  curl --fail -u $1:$2 -X GET http://${CONTAINER_IP}:8080/job/$3
}

function test_non_pipeline_dependencies_pulled() {
    curl --fail -u $1:$2 -X GET http://${CONTAINER_IP}:8080/pluginManager/plugin/ace-editor/thirdPartyLicenses
    curl --fail -u $1:$2 -X GET http://${CONTAINER_IP}:8080/pluginManager/plugin/branch-api/thirdPartyLicenses
    curl --fail -u $1:$2 -X GET http://${CONTAINER_IP}:8080/pluginManager/plugin/credentials/thirdPartyLicenses
    curl --fail -u $1:$2 -X GET http://${CONTAINER_IP}:8080/pluginManager/plugin/durable-task/thirdPartyLicenses
    curl --fail -u $1:$2 -X GET http://${CONTAINER_IP}:8080/pluginManager/plugin/cloudbees-folder/thirdPartyLicenses
    curl --fail -u $1:$2 -X GET http://${CONTAINER_IP}:8080/pluginManager/plugin/git-server/thirdPartyLicenses
    curl --fail -u $1:$2 -X GET http://${CONTAINER_IP}:8080/pluginManager/plugin/git-client/thirdPartyLicenses
    curl --fail -u $1:$2 -X GET http://${CONTAINER_IP}:8080/pluginManager/plugin/git/thirdPartyLicenses
    curl --fail -u $1:$2 -X GET http://${CONTAINER_IP}:8080/pluginManager/plugin/handlebars/thirdPartyLicenses
    curl --fail -u $1:$2 -X GET http://${CONTAINER_IP}:8080/pluginManager/plugin/momentjs/thirdPartyLicenses
    curl --fail -u $1:$2 -X GET http://${CONTAINER_IP}:8080/pluginManager/plugin/plain-credentials/thirdPartyLicenses
    curl --fail -u $1:$2 -X GET http://${CONTAINER_IP}:8080/pluginManager/plugin/scm-api/thirdPartyLicenses
    curl --fail -u $1:$2 -X GET http://${CONTAINER_IP}:8080/pluginManager/plugin/script-security/thirdPartyLicenses
    curl --fail -u $1:$2 -X GET http://${CONTAINER_IP}:8080/pluginManager/plugin/structs/thirdPartyLicenses
}

function run_tests() {
  local name=$1 ; shift
  create_container $name $VOLUME
  CONTAINER_IP=$(get_container_ip $name)
  test_connection $name

  # Make sure no plugins failed to load
  set +e
  CONTAINER=$(cat $cidfile)
  docker logs $CONTAINER |& grep "Failed Loading plugin"
  rc=$?
  set -e
  if [ $rc -eq 0 ]; then
    echo "Failed loading plugins"
    return 1
  fi

  test_create_job admin password testJob
  test_get_job admin password testJob
  set +e
  test_create_job admin badpassword failJob
  if [ $? -eq 0 ]; then
    echo "Fail: was able to create job with bad password"
    return 1
  fi
  set -e

  delete_container

  # start a new container with the old volume so we can try to change the password
  CONTAINER_ARGS="-u 10000:0 -e JENKINS_PASSWORD=newpassword" create_container $name $VOLUME
  CONTAINER_IP=$(get_container_ip $name)

  # need this to wait for the container to start up
  test_connection $name
  # new password should work
  test_get_job admin newpassword testJob
  set +e
  # old password should not
  test_get_job admin password testJob
  if [ $? -eq 0 ]; then
    echo "Fail: was able to get job with bad password"
    return 1
  fi
  set -e
  test_non_pipeline_dependencies_pulled admin newpassword
  # Stop the container so next tests can run
  docker stop $(get_cid $name)
}

function run_s2i_tests() {
  if [ "$(which s2i)" == "" ]; then
    echo "WARNING: Please install the s2i binary to run the s2i tests."
    return
  fi
  output_image="openshift/s2i-test-jenkins"
  s2i build --context-dir="1/test/s2i" --loglevel=3 --pull-policy=never \
    file://$(pwd)/.. $IMAGE_NAME $output_image
  s2i_volume=$(mktemp -d)
  chmod a+rwx $s2i_volume
  IMAGE_NAME="${output_image}" create_container s2i-jenkins-test $s2i_volume
  cid=s2i-jenkins-test
  CONTAINER_IP=$(get_container_ip ${cid})
  test_connection ${cid}

  if ! docker exec ${cid} ls /var/lib/jenkins/plugins/sample.jpi.pinned; then
    echo "Fail: The sample.jpi.pinned plugin was not copied"
    return 1
  fi
  if ! docker exec ${cid} ls /var/lib/jenkins/plugins/ansicolor.jpi; then
    echo "Fail: The ansicolor plugin should be installed"
    return 1
  fi
  if ! docker exec ${cid} ls /var/lib/jenkins/jobs/sample-app-test/config.xml; then
    echo "Fail: The sample-app-test job was not copied"
    return 1
  fi
  docker exec ${cid} cat /var/lib/jenkins/config.xml | grep -q "s2i-test-config"
  if [ "$?" != "0" ]; then
    echo "Fail: The config.xml was not copied"
    return 1
  fi

  if [[ -n "{VERIFY_INSTALLED:-}" ]]; then
	  if ! docker exec ${cid} ls /var/lib/jenkins/plugins/${VERIFY_INSTALLED}.jpi; then
		  echo "Fail: the ${VERIFY_INSTALLED} plugin was not installed."
		  return 1
      fi
  fi

  if [[ -n "{VERIFY_NOT_INSTALLED:-}" ]]; then
	  if docker exec ${cid} ls /var/lib/jenkins/plugins/${VERIFY_NOT_INSTALLED}.jpi; then
		  echo "Fail: the ${VERIFY_NOT_INSTALLED} plugin was installed."
		  return 1
      fi
  fi

  test_get_job admin password sample-app-test
  test_create_job admin password testJob
  test_get_job admin password testJob
}

# Tests.

# Normal tests
echo "Normal test: 64 bit"
VERIFY_NOT_INSTALLED=ghprb
CONTAINER_ARGS="-u 10000:0 -e OPENSHIFT_JENKINS_JVM_ARCH=x86_64"
run_tests jenkins_test
cleanup
sleep 5
echo "Normal test: 32 bit"
CIDFILE_DIR=$(mktemp --suffix=jenkins_test_cidfiles -d)
VOLUME=$(mktemp -d)
chmod a+rwx $VOLUME
CONTAINER_ARGS="-u 10000:0 -e OPENSHIFT_JENKINS_JVM_ARCH=i386 "
run_tests jenkins_test
cleanup
sleep 5
echo "Test: install plugins on start"
CIDFILE_DIR=$(mktemp --suffix=jenkins_test_cidfiles -d)
VOLUME=$(mktemp -d)
chmod a+rwx $VOLUME
VERIFY_INSTALLED=ghprb
VERIFY_NOT_INSTALLED=""
CONTAINER_ARGS="-u 10000:0 -e OPENSHIFT_JENKINS_JVM_ARCH=x86_64 -e INSTALL_PLUGINS=ghprb:1.35.0"
run_tests jenkins_test

# S2I tests
run_s2i_tests

FAILURE=false

echo "SUCCESS!"
